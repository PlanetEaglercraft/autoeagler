name: Nightly Build and Deploy

on:
  # Uncomment below to run every night at midnight UTC
  # schedule:
  #   - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  nightly:
    runs-on: ubuntu-latest

    steps:
      ##########################################################
      # 1. Checkout this repo (not submodules yet)
      ##########################################################
      - name: Checkout repository
        uses: actions/checkout@v4

      ##########################################################
      # 2. Download previous version cache (if available)
      ##########################################################
      - name: Download previous version cache
        id: download_cache
        uses: actions/download-artifact@v4
        with:
          name: epk-version-cache
          path: .version_cache
        continue-on-error: true  # In case it's the first run

      ##########################################################
      # 3. Initialize submodules
      ##########################################################
      - name: Init submodules with fallback
        run: |
          set -e
          git submodule update --init --recursive --remote || (
            git config submodule.workspace.url https://github.com/Eaglercraft-Archive/EaglercraftX-1.8-workspace.git
            git submodule sync
            git submodule update --init --recursive --remote
          )

      ##########################################################
      # 4. Detect if version has changed
      ##########################################################
      - name: Check for version change
        id: check_version
        run: |
          VERSION_FILE="workspace/desktopRuntime/resources/EPKVersionIdentifier.txt"
          CACHE_FILE=".version_cache/epk-version.txt"

          if [ ! -f "$VERSION_FILE" ]; then
            echo "‚ùå Version file not found!"
            exit 1
          fi

          CURRENT_VERSION=$(tr -d '\n\r' < "$VERSION_FILE")
          echo "üîé Current version: $CURRENT_VERSION"

          if [ -f "$CACHE_FILE" ]; then
            PREVIOUS_VERSION=$(cat "$CACHE_FILE")
            echo "üì¶ Previous version: $PREVIOUS_VERSION"
          else
            PREVIOUS_VERSION=""
            echo "‚ö†Ô∏è No previous version found."
          fi

          # Save current version for next run
          echo "$CURRENT_VERSION" > epk-version.txt

          # Determine if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "‚úÖ Version has changed."
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "‚èπÔ∏è Version unchanged. Skipping build."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      ##########################################################
      # 5. Upload current version for next workflow run
      ##########################################################
      - name: Upload version cache
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: epk-version-cache
          path: epk-version.txt
          retention-days: 2

      ##########################################################
      # 6. Stop early if version has not changed
      ##########################################################
      - name: Exit if version unchanged
        if: steps.check_version.outputs.changed == 'false'
        run: echo "üõë No version change. Exiting." && exit 0

      ##########################################################
      # 7. Cache Gradle dependencies
      ##########################################################
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            workspace/gradle
            workspace/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('workspace/**/*.gradle*', 'workspace/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ##########################################################
      # 8. Set up JDK 21
      ##########################################################
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      ##########################################################
      # 9. Make Gradle wrapper executable
      ##########################################################
      - name: Make Gradle wrapper executable
        run: chmod +x workspace/gradlew

      ##########################################################
      # 10. Build both targets
      ##########################################################
      - name: Build project
        working-directory: workspace
        run: ./gradlew makeMainOfflineDownload makeMainWasmClientBundle --parallel

      ##########################################################
      # 11. Delete old nightly release/tag (if exists)
      ##########################################################
      - name: Delete existing nightly release and tag
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: nightly
          delete_release: true
          delete_tag: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      ##########################################################
      # 12. Create new nightly release
      ##########################################################
      - name: Create nightly release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          name: Nightly Build
          prerelease: true
          draft: false
          overwrite: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            workspace/target_teavm_javascript/javascript/EaglercraftX_1.8_Offline_en_US.html
            workspace/target_teavm_javascript/javascript/EaglercraftX_1.8_Offline_International.html
            workspace/target_teavm_wasm_gc/javascript_dist/EaglercraftX_1.8_WASM-GC_Offline_Download.html

      ##########################################################
      # 13. Prepare GitHub Pages content
      ##########################################################
      - name: Prepare GitHub Pages files
        run: |
          mkdir -p gh-pages-publish/js gh-pages-publish/wasm
          rm -rf gh-pages-publish/js/* gh-pages-publish/wasm/*
          cp -r workspace/target_teavm_javascript/javascript/* gh-pages-publish/js/
          cp -r workspace/target_teavm_wasm_gc/javascript_dist/* gh-pages-publish/wasm/

          if [ -f workspace/desktopRuntime/resources/EPKVersionIdentifier.txt ]; then
            VER=$(tr -d '\n\r' < workspace/desktopRuntime/resources/EPKVersionIdentifier.txt)
            echo "<div style='position:absolute;top:0;right:0;background:#eee;padding:4px;font-size:small;z-index:9999;'>EaglercraftX Version: $VER</div>" > gh-pages-publish/index.html
          fi

      ##########################################################
      # 14. Deploy to GitHub Pages
      ##########################################################
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: gh-pages-publish
